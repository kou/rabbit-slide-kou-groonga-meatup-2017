= Groonga族2016

: author
   須藤功平
: institution
   株式会社クリアコード
: content-source
   Groonga Meatup 2017
: date
   2017-02-09
: allotted-time
   30m
: theme
   groonga

= 2016年の概要

  * Groongaが凄くよくなった
    * 速くもなったし便利にもなった
  * Mroongaはそこそこ
    * でもGroongaがよくなったので\n
      Mroongaもよくなった
  * PGroongaも凄くよくなった

= 最新情報：Groonga

  # image
  # src = images/groonga-logo.svg
  # relative_width = 100

(('tag:center'))
ぐるんが

= Groonga: 1

索引指定の\n
等価検索を\n
サポート

= 索引指定

  column == 29
  # ↑Groongaが適切な索引を選んで使用
  Numbers.index == 29
  # ↑指定した索引で検索

= Groonga: 2

シーケンシャル\n
サーチの\n
パフォーマンス向上\n
(('note:（索引なしでも速くなる）'))

= 向上パターン

  true
  # ↑定数
  x == 29
  # ↑定数値との二項演算

= Groonga: 3

(({config_*}))\n
コマンドを追加

= (({config_*}))コマンド

(('tag:center'))
DB全体で使える\n
キー・バリュー・ストア

  * (({config_set}))：設定
  * (({config_get}))：取得
  * (({config_delete}))：削除

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/configuration.html"|URL:http://groonga.org/ja/docs/reference/configuration.html>))

= 用途例

  * エイリアス情報を格納する\n
    テーブル名の指定
  * プラグインの設定
    * 例：クエリー展開辞書のパス指定
    * 例：ステミングの言語指定

= Groonga: 4

エイリアス\n
サポート

= エイリアス

  * 同一テーブル・カラムに\n
    複数の名前でアクセス
    * 例：tags/TagsどちらでもOK

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/alias.html"|URL:http://groonga.org/ja/docs/reference/alias.html>))

= 用途例

  * 既存クライアントを変更せずに\n
    テーブル・カラムの名前を変更
    * 古いテーブルを削除→\n
      古い名前で新しいテーブルを参照
  * ダウンタイムなしで\n
    カラムの型を変更
    * 変更後にエイリアスを切り替え

= 使い方：設定

  # Aliasesテーブルのキーを別名、
  # real_nameカラムを実名とする
  config_set \
    alias.column \
    Aliases.real_name

= 使い方：登録

  table_create Aliases \
    TABLE_HASH_KEY ShortText
  column_create Aliases real_name \
    COLUMN_SCALAR ShortText
  # Users.ageをUsers.yearsに展開
  load --table Aliases
  [
  {"_key": "Users.age",
   "real_name": "Users.years"}
  ]

= エイリアスの解決

  * 再帰的
    * Users.age→\n
      Users.years→\n
      People.years\n
      もアリ

= Groonga: 5

(({lock_*}))\n
コマンドを追加

= (({lock_*}))コマンド

  * (({lock_acquire}))：取得
  * (({lock_release}))：解放

= 用途

テスト

= Groonga: 6

あいまい検索\n
サポート

= あいまい検索

  * 多少表記が違ってもマッチ
  * 索引を使うので高速
  * @naoa_y作

(('tag:center'))
(('tag:small'))
((<"http://blog.createfield.com/entry/2016/02/28/014432"|URL:http://blog.createfield.com/entry/2016/02/28/014432>))

= 用途例

  * 名前・住所の検索
    * 表記が揺れやすい
  * オートコンプリート
    * ユーザーの入力はミスが多め

= 使い方：準備

  # パトリシアトライなら
  # 索引なしでキーをあいまい検索できる
  table_create Products TABLE_PAT_KEY ShortText
  load --table Products
  [
  {"_key": "Groonga"},
  {"_key": "Grooonga"},
  {"_key": "Mroonga"}
  ]

= 使い方：検索

  select Products \
    --filter 'fuzzy_search(_key, "Groonga")' \
    --output_columns '_key, _score'
  # ... 一致しているほど_scoreが高い ...
  # ["Groonga", 2],
  # ["Grooonga", 1], 多少違ってもヒット
  # ["Mroonga", 1]   多少違ってもヒット
  # ...

= Groonga: 7

(({object_inspect}))\n
コマンドを追加

= (({object_inspect}))

  * テーブル・カラムの情報を返す
    * レコード数とか総キーサイズとか
  * 用途：調査

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/commands/object_inspect.html"|URL:http://groonga.org/ja/docs/reference/commands/object_inspect.html>))

= Groonga: 8

ベクターの\n
指定位置要素の\n
索引検索を\n
サポート

= 例

  # agesの1番目の要素が29未満ならヒット
  # agesの0番目の要素が29未満でも関係ない
  ages[1] < 29

= 使い方：索引

  table_create Teams TABLE_NO_KEY
  column_create Teams ages \
    COLUMN_VECTOR UInt8

  table_create Ages TABLE_PAT_KEY
  # 索引にはWITH_POSITIONを指定すること！
  column_create Ages teams_age \
    COLUMN_INDEX|WITH_POSITION Teams age

= 使い方：検索

  load --table Teams
  [
  {"ages": [ 1, 30,  2]},
  {"ages": [30, 28, 29]}
  ]
  select Teams --filter 'ages[1] < 29'
  # "ages": [ 1, 30,  2]はヒットしない
  # "ages": [30, 28, 29]だけヒット

= Groonga: 9

(({object_remove}))\n
コマンドを追加

= (({object_remove}))

  * テーブル・カラム…を削除
    * 壊れていても強制削除可！
    * 要注意コマンド
  * 用途：障害対応

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/commands/object_remove.html"|URL:http://groonga.org/ja/docs/reference/commands/object_remove.html>))

= Groonga: 10

クエリー最適化

= AND+非等価→AND NOT+等価

  # 最適化前（索引を使えない）
  XXX && column != xxx
  # 最適化後（索引を使える）
  XXX &! column == xxx

= Groonga: 11

Memcached\n
プロトコルでの\n
カラム値の\n
取得・更新を\n
サポート

= 使い方：スキーマ

  # テーブルのキーはShortText
  table_create Memos \
    TABLE_HASH_KEY ShortText
  # カラムはスカラーでText
  # （ShortText/LongTextも可）
  column_create Memos content \
    COLUMN_SCALAR Text

= 使い方：サーバー

  # Memcachedプロトコルで
  # Memos.contentにアクセス
  % groonga \
      --protocol memcached \
      --port 11211 \
      --memcached-column Memos.content \
      -s db

= 使い方：クライアント

  # coderay python
  import bmemcached
  servers = ("127.0.0.1:11211",)
  client = bmemcached.Client(servers)
  print(client.get("abc")) # None
  client.set("abc", "Hello")
  print(client.get("abc")) # "Hello"

= 使い方：確認

  % groonga db select Memos
  # {"_key":    "abc",   # キー
  #  "content": "Hello", # バリュー
  #  ...他にいくつかメタデータ...}

= 用途例

  * 永続化対応キーバリューストア
  * 頻繁な参照・更新処理の高速化
    * HTTPより速い
    * 索引は更新される\n
      →更新したデータはHTTPで全文検索

= 参考：hog

  * GroongaベースのKVS\n
    by @takiuchi
  * 既存DBのカラムを読み書き
    * --protocol memcachedと同様
    * ↑より軽そうで機能が多い
  * 独自プロトコル

(('tag:center'))
(('tag:small'))
((<"https://github.com/genki/hog"|URL:https://github.com/genki/hog>))

= Groonga: 12

ハッシュ\n
テーブルの\n
最大\n
総キーサイズUP\n
4GiB→1TiB

= 使い方

  # _
  # デフォルトは4GiBのまま
  # KEY_LARGE指定で1TiBに
  table_create \
    --name Large \
    --flags TABLE_HASH_KEY|KEY_LARGE \
    --key_type ShortText

= Groonga: 13

即\n
シャットダウン\n
機能

= 使い方

  # _
  # デフォルトは処理中の接続が
  # 終わってからシャットダウン
  # immediate：処理中の接続が
  # あってもすぐにシャットダウン
  shutdown --mode immediate

= 用途例

  * Windowsシャットダウン時
    * 指定時間内に終了しないと強制終了
    * 強制終了するとDB破損の可能性アリ
    * 強制終了よりimmediateの方がマシ
    * (('note:（Windowsには指定時間を伸ばすAPIアリ）'))

= Groonga: 14

依存テーブル\n
依存カラムも\n
一緒に\n
テーブル削除

= 対象例

  table_create Numbers \
    TABLE_PAT_KEY Int64
  table_create IDs \
    TABLE_HASH_KEY Numbers
  # ↑IDsはNumbersを参照
  table_remove Numbers
  # ↑Numbersは参照されている→エラー

= 使い方

  # --dependent yesを指定
  # デフォルトはno
  table_remove Numbers \
    --dependent yes
  # IDsも一緒に削除

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/commands/table_remove.html"|URL:http://groonga.org/ja/docs/reference/commands/table_remove.html>))

= Groonga: 15

HTTPでの\n
タイムアウト\n
対応

= タイムアウト

  * タイムアウトなし\n
    →クライアント側で切断
    * 切断後もサーバーのCPUは空かない
  * タイムアウトあり\n
    →サーバー側で中断
    * サーバーのCPUが空く

= 使い方

  # 2.9秒で完了しなかったら
  # 408 Request Timeoutを返す
  /d/select.json?...&
    request_timeout=2.9

(('tag:center'))
(('tag:small'))
((<"http://groonga.org/ja/docs/reference/command/request_timeout.html"|URL:http://groonga.org/ja/docs/reference/command/request_timeout.html>))

= Groonga: 16

多段\n
ドリルダウン\n
サポート

= 多段ドリルダウン

  * ドリルダウン結果を\n
    ドリルダウン
  * 例：大中小分類
  * データを正規化できる
    * データの更新に強い

# TODO: 例

= Groonga: 17

ウィンドウ関数\n
サポート

= ウィンドウ関数

  (1) 特定の軸のレコード毎に処理
      * 普通の関数は1レコード毎に処理
      * ドリルダウンは全レコードを処理
  (2) 指定したソート順で処理

= Groonga: 18

スライス\n
サポート

= スライス

  * OLAPの用語\n
    (('note:豆知識：ドリルダウンもOLAPの用語'))
    * 軸を1つ決めて絞り込む
  * 例：\n
    全期間中今年のログだけに着目
    * 「今年」という軸で絞り込んでいる

(('tag:center'))
(('tag:small'))
((<"https://en.wikipedia.org/wiki/OLAP_cube"|URL:https://en.wikipedia.org/wiki/OLAP_cube>))

= スライスのイメージ

  # image
  # src = images/OLAP_slicing.png
  # relative_width = 100

(('tag:center'))
(('tag:x-small'))
CC BY-SA 3.0 by Infopedian\n
((<"https://commons.wikimedia.org/wiki/File:OLAP_slicing.png"|URL:https://commons.wikimedia.org/wiki/File:OLAP_slicing.png>))

= 用途例

(('tag:center'))
1リクエストで\n
オススメ絞り込み結果も表示

  # image
  # src = images/slice-example.svg
  # relative_width = 100

= 使い方

  select Works \
    --match_columns description \
    --query Webアプリ \
    # ↑までが通常の検索
    # ↓で追加の絞り込み
    --slices[ruby].filter language:Ruby

= Groonga: 20

数値・時間の\n
分類関数を\n
追加\n
(('note:（分類関数という言い回しはよくない気がする）'))

= 分類関数

  * 値をグループ化
    * 例：100-199は100、200-299は200
    * 例：2017年1月も2017年2月も2017年

= 用途例

  * 価格帯でのドリルダウン
  * 年や月でのドリルダウン

= 使い方

  select Logs \
    --columns[year].stage filtered \
    --columns[year].type UInt16 \
    --columns[year].flags COLUMN_SCALAR \
    --columns[year].value \
      'time_classify_year(timestamp)' \
    --output_columns timestamp,year
    # yearカラムに年だけが入っている

= Groonga: 21

コマンド\n
バージョン3\n
追加

= コマンドバージョン3

  * レスポンスのフォーマット変更
    * 配列→オブジェクト
  * デフォルトは1のまま

= 出力例

  status --command_version 3
  # {
  #   "header": {
  #     "return_code": 0,
  #     "start_time": 1486275098.294436,
  #     "elapsed_time": 0.00002,
  #   },
  #   "body": {
  #     "alloc_count": 275,
  #     ...
  #   }
  # }

= Groonga: 22

(({query_expand}))\n
コマンドを追加

= (({query_expand}))コマンド

  * クエリー展開結果を返す
  * 同義語の確認に便利

= 使用例：準備

  table_create Words TABLE_HASH_KEY ShortText
  # 類義語のリスト
  column_create Words synonyms \
    COLUMN_VECTOR ShortText
  # 「焼肉」は「焼き肉」とも書かれる
  load --table Words
  [
  {"_key": "焼肉",
   "synonyms": ["焼肉", "焼き肉"]}
  ]

= 使用例：展開

  query_expand Words.synonyms 焼肉
  # "((焼肉) OR (焼き肉))"
  # ↑「焼肉」で検索すると
  # 「焼肉」と「焼き肉」のORで検索

= Groonga: 23

デフォルトの\n
ロック\n
タイムアウト\n
短縮

= ロックタイムアウト

  * ロック獲得を諦めるまでの時間
  * 2.7時間→15分
    * クラッシュによるロック残留に\n
      気づくまでの時間が短くなった

= Groonga: 24

テーブルの\n
最大レコード数\n
更新

= 最大レコード数

  * 従来：2(('sup:28'))-1（約2億7千万件）
  * 新：
    * NO_KEY, PAT_KEY: 約10億件
    * HASH_KEY: 約5億件
    * DAT_KEY: 約2億7千万件

= Groonga: 25

Zstandard対応

= Zstandard

  * 新しい圧縮ライブラリー
    * zlib並の圧縮率
    * zlibの数倍の速度
  * カラム値の圧縮に利用可能

= 使い方

  table_create Memos \
    TABLE_HASH_KEY ShortText
  # COMPRESS_ZSTDを指定するだけ
  column_create Memos content \
    COLUMN_SCALAR|COMPRESS_ZSTD \
    Text

= Groonga: 26

選択的\n
カラム圧縮\n
対応

= 選択的カラム圧縮

  * 小さなデータの圧縮は無意味
    * ヘッダーの追加でむしろ大きくなる
    * ムダにリソースを使う
  * ある程度大きなデータだけ圧縮
    * 257バイト以上のデータのみ圧縮
    * →カジュアルに圧縮指定できる！

= Groonga: 27

(({load}))コマンドが\n
レコードIDの\n
返却を\n
サポート

= (({load}))コマンド

  * バルクロード用コマンド
    * 何件ロードしたかだけ返す
    * ロードしたレコードのIDは返さない
  * 1件のみロードしたい時に不便
    * 追加したらIDを知りたい！

= 使い方

  # _keyは数値
  table_create Numbers TABLE_HASH_KEY Int32
  # --output_ids yesと--command_version 3の指定が必要！
  load --table Numbers \
       --output_ids yes --command_version 3
  [
  {"_key": 29},     # OK
  {"_key": "Hello"} # NG
  ]
  # "body": {
  #   "loaded_ids": [1, 0]
  # }

= Groonga: 28

(({load}))コマンドが\n
エラー情報の\n
返却を\n
サポート

= (({load}))コマンド

  * バルクロード用コマンド
    * エラーはログに記録のみ
    * バッチのときは妥当な挙動
  * インタラクティブなとき
    * ログ確認は不便
    * エラーをすぐに確認したい！

= 使い方

  # --output_errors yesと--command_version 3の指定が必要！
  load --table Numbers \
       --output_errors yes --command_version 3
  [
  {"_key": 29},     # OK
  {"_key": "Hello"} # NG
  ]
  # "body": {
  #   "errors": [
  #     {"return_code": 0, "message": null},
  #     {"return_code": -22, "message": "failed to..."}
  #   ]
  # }

= Groonga: ((*29*))

速くなった！\n
検索も！\n
更新も！

= Groonga: まとめ

便利になって\n
速くもなった

= 最新情報：Mroonga

  # image
  # src = images/mroonga-logo.svg
  # relative_width = 100

(('tag:center'))
むるんが

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: おしらせ

初心者向けの電子書籍ができました！

((<"https://grnbook-ja.tumblr.com/"|URL:https://grnbook-ja.tumblr.com/>))\n
@KitaitiMakoto

= Mroonga: 1

(({mroonga_}))\n
(({normalize}))\n
UDFを追加\n
(('note:UDF: User Defined Function'))

== スライドプロパティ

: groonga-product

   mroonga

= (({mroonga_normalize}))

  * 正規化した文字列を返す
  * UDFなので全文検索索引以外\n
    でも使える

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: 2

(({*SS}))プラグマ追加

== スライドプロパティ

: groonga-product

   mroonga

= (({*SS}))プラグマ

  # coderay sql
  SELECT ...
    WHERE
      MATCH (title)
  -- Groongaの検索条件を↓で使える
      AGAINST ('*SS ...'
               IN BOOLEAN MODE);

== スライドプロパティ

: groonga-product

   mroonga

= Groongaの検索条件

  * 豊富な検索処理
    * 例：あいまい検索
  * 複数の索引で検索可→速い！
    * MySQLは1つしか使えない

(('tag:center'))
(('tag:small'))
書式：((<"http://groonga.org/ja/docs/reference/grn_expr/script_syntax.html"|URL:http://groonga.org/ja/docs/reference/grn_expr/script_syntax.html>))

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: 3

(({mroonga_}))\n
(({snippet_html}))\n
UDFが便利に

== スライドプロパティ

: groonga-product

   mroonga

= (({mroonga_snippet_html}))

  # coderay sql
  SELECT
    mroonga_snippet_html(content,
                         '+肉 -魚 +野菜' AS query)
    -- クエリーをそのまま指定できる↑
    -- （肉、野菜は対象。魚は非対象。）
    -- 「AS query」がポイント
    ...
    WHERE
      MATCH (content)
      AGAINST ('+肉 -魚 +野菜' IN BOOLEAN MODE);

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: 4

マルチバイトな\n
カラム名に対応

== スライドプロパティ

: groonga-product

   mroonga

= マルチバイトなカラム名

  * 例：日本語カラム名

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: 5

(({FOREIGN KEY}))制約\n
対応

== スライドプロパティ

: groonga-product

   mroonga

= (({FOREIGN KEY}))制約対応

  * (({INSERT}))
    * 存在しない参照の挿入はエラー
  * (({UPDATE}))
    * 被参照レコードの更新はエラー
  * (({DELETE}))
    * 被参照レコードの削除はエラー

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: 6

最新\n
MySQL・MariaDB\n
対応

== スライドプロパティ

: groonga-product

   mroonga

= 対応バージョン

  * MySQL: 5.7.17対応
    * 8.0.0は未確認
  * MariaDB: 10.2.3対応

== スライドプロパティ

: groonga-product

   mroonga

= Mroonga: まとめ

  * 便利になった！
  * 速くもなった！
    * Groongaが速くなったから

== スライドプロパティ

: groonga-product

   mroonga

= 最新情報：PGroonga

  # image
  # src = images/pgroonga-logo.svg
  # relative_width = 100

(('tag:center'))
ぴーじーるんが

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 1

(({TABLESPACE}))\n
対応

== スライドプロパティ

: groonga-product

   pgroonga

= (({TABLESPACE}))

  * 別のパスにファイルを置く機能
    * 使用例：索引はSSDに置く

(('tag:center'))
(('tag:small'))
((<"https://www.postgresql.org/docs/current/static/manage-ag-tablespaces.html"|URL:https://www.postgresql.org/docs/current/static/manage-ag-tablespaces.html>))

== スライドプロパティ

: groonga-product

   pgroonga

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 2

複合主キー対応

== スライドプロパティ

: groonga-product

   pgroonga

= 複合主キー

  * 複数のカラムを主キーにする
  * (({pgroonga.score}))を使うには\n
    主キーが必要
    * 複合主キーでも(({pgroonga.score}))を使えるようになった

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 3

マルチバイトな\n
カラム名に対応

== スライドプロパティ

: groonga-product

   pgroonga

= マルチバイトなカラム名

  * 例：日本語のカラム名
  * 制限：UTF-8のみ対応

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 4

類似文書検索対応

== スライドプロパティ

: groonga-product

   pgroonga

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 5

前方一致検索対応

== スライドプロパティ

: groonga-product

   pgroonga

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 6

前方一致RK検索対応

== スライドプロパティ

: groonga-product

   pgroonga

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 7

(({pgroonga.}))\n
(({highlight_html}))追加

== スライドプロパティ

: groonga-product

   pgroonga

= (({pgroonga.highlight_html}))

  * テキスト中のキーワードをハイライト
  * TODO

(({pgroonga.query_extract_keywords}))もあわせて

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 8

ヒット件数の見積対応

== スライドプロパティ

: groonga-product

   pgroonga

= ヒット件数の見積

  * 実行計画決定に利用
    * 見積精度が上がると\n
      適切な計画を選びやすくなる
    * →速くなる！

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 9

ストリーミング\n
レプリ\n
ケーション\n
対応

== スライドプロパティ

: groonga-product

   pgroonga

= レプリケーション

  * 検索性能が足りないときに\n
    検索専用ノードを増やして対応できる

(('tag:center'))
(('tag:small'))
((<"https://pgroonga.github.io/ja/reference/replication.html"|URL:https://pgroonga.github.io/ja/reference/replication.html>))

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 10

Zstandard\n
対応

== スライドプロパティ

: groonga-product

   pgroonga

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: 11

生Groonga検索\n
対応強化

== スライドプロパティ

: groonga-product

   pgroonga

= 生Groonga検索

  * PostgreSQLを介さずにGroongaで検索
    * (({pgroonga.command}))を使う

= 使い方

TODO

== スライドプロパティ

: groonga-product

   pgroonga

= PGroonga: まとめ

  * 便利になった！
  * 速くもなった！
    * Groongaが速くなったから

== スライドプロパティ

: groonga-product

   pgroonga

= まとめ

  * Groongaが凄くよくなった
    * 速くもなったし便利にもなった
  * Mroongaの本ができた
    * ((<"https://grnbook-ja.tumblr.com/"|URL:https://grnbook-ja.tumblr.com/>))\n
      by @KitaitiMakoto
  * PGroongaも凄くよくなった

